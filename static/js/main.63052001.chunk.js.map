{"version":3,"sources":["logo.svg","GameOfLife/gameOfLife.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","Dropdown","Button","variant","playButton","pauseButton","clear","slow","fast","seed","Main","gridCopy","arrayClone","state","setState","Math","floor","random","generation","clearInterval","intervalId","setInterval","play","speed","grid","Array","fill","map","g","g2","count","gridsize","arr","JSON","parse","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63052001.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport \"./gameOfLife.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { ButtonToolbar, Dropdown, Button } from \"react-bootstrap\";\r\n\r\nclass Box extends React.Component {\r\n  selectBox = () => {\r\n    this.props.selectBox(this.props.row, this.props.col);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.boxClass}\r\n        id={this.props.id}\r\n        onClick={this.selectBox}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Grid extends React.Component {\r\n  render() {\r\n    const width = this.props.cols * 19;\r\n    var rowsArr = [];\r\n\r\n    var boxClass = \"\";\r\n    for (var i = 0; i < this.props.rows; i++) {\r\n      for (var j = 0; j < this.props.cols; j++) {\r\n        let boxId = i + \"_\" + j;\r\n\r\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\r\n        rowsArr.push(\r\n          <Box\r\n            boxClass={boxClass}\r\n            key={boxId}\r\n            boxId={boxId}\r\n            row={i}\r\n            col={j}\r\n            selectBox={this.props.selectBox}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"grid\" style={{ width: width }}>\r\n        {rowsArr}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Buttons extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"center\">\r\n        <Dropdown>\r\n          <Button variant=\"primary\" onClick={this.props.playButton}>\r\n            Play{\" \"}\r\n          </Button>{\" \"}\r\n          <Button variant=\"warning\" onClick={this.props.pauseButton}>\r\n            Pause{\" \"}\r\n          </Button>{\" \"}\r\n          <Button variant=\"light\" onClick={this.props.clear}>\r\n            Clear\r\n          </Button>{\" \"}\r\n          <Button variant=\"info\" onClick={this.props.slow}>\r\n            Slow Speed\r\n          </Button>{\" \"}\r\n          <Button variant=\"info\" onClick={this.props.fast}>\r\n            Fast Speed\r\n          </Button>{\" \"}\r\n          <Button variant=\"primary\" onClick={this.props.seed}>\r\n            Generate Seed\r\n          </Button>{\" \"}\r\n        </Dropdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n/* <Button variant=\"warning\" >Pause console.log(\"PAUSE\")</Button>{' '} */\r\nexport default class Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.speed = 100;\r\n    this.rows = 30;\r\n    this.cols = 50;\r\n\r\n    this.state = {\r\n      generation: 0,\r\n      gridFull: Array(this.rows)\r\n        .fill()\r\n        .map(() => Array(this.cols).fill(false)),\r\n    };\r\n  }\r\n\r\n  selectBox = (row, col) => {\r\n    let gridCopy = arrayClone(this.state.gridFull);\r\n    gridCopy[row][col] = !gridCopy[row][col];\r\n    this.setState({\r\n      gridFull: gridCopy,\r\n    });\r\n  };\r\n\r\n  /* Random the box to be ON */\r\n  seed = () => {\r\n    let gridCopy = arrayClone(this.state.gridFull);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        if (Math.floor(Math.random() * 10) === 1) {\r\n          gridCopy[i][j] = true;\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      gridFull: gridCopy,\r\n      generation: 0,\r\n    });\r\n    clearInterval(this.intervalId);\r\n  };\r\n\r\n  playButton = () => {\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = setInterval(this.play, this.speed);\r\n  };\r\n\r\n  pauseButton = () => {\r\n    clearInterval(this.intervalId);\r\n  };\r\n\r\n  slow = () => {\r\n    this.speed = 1000;\r\n    this.playButton();\r\n  };\r\n\r\n  fast = () => {\r\n    this.speed = 100;\r\n    this.playButton();\r\n  };\r\n\r\n  clear = () => {\r\n    clearInterval(this.intervalId);\r\n    var grid = Array(this.rows)\r\n      .fill()\r\n      .map(() => Array(this.cols).fill(false));\r\n    this.setState({\r\n      gridFull: grid,\r\n      generation: 0,\r\n    });\r\n  };\r\n\r\n\r\n  play = () => {\r\n    let g = this.state.gridFull;\r\n    let g2 = arrayClone(this.state.gridFull);\r\n\r\n    /* go through the grid followed by the rule of game of life */\r\n\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let count = 0;\r\n        if (i > 0) if (g[i - 1][j]) count++;\r\n        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\r\n        if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\r\n        if (j < this.cols - 1) if (g[i][j + 1]) count++;\r\n        if (j > 0) if (g[i][j - 1]) count++;\r\n        if (i < this.rows - 1) if (g[i + 1][j]) count++;\r\n        if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\r\n        if (i < this.rows - 1 && j < this.cols - 1)\r\n          if (g[i + 1][j + 1]) count++;\r\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\r\n        if (!g[i][j] && count === 3) g2[i][j] = true;\r\n      }\r\n    }\r\n    this.setState({\r\n      gridFull: g2,\r\n      generation: this.state.generation + 1,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.seed();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Game of Life</h1>\r\n        <h1>\r\n          <Buttons\r\n            playButton={this.playButton}\r\n            pauseButton={this.pauseButton}\r\n            slow={this.slow}\r\n            fast={this.fast}\r\n            clear={this.clear}\r\n            seed={this.seed}\r\n            gridsize={this.gridsize}\r\n          />\r\n          <Grid\r\n            gridFull={this.state.gridFull}\r\n            rows={this.rows}\r\n            cols={this.cols}\r\n            selectBox={this.selectBox}\r\n          />\r\n          \r\n          <h2>Generation: {this.state.generation}</h2>\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction arrayClone(arr) {\r\n  return JSON.parse(JSON.stringify(arr));\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport GameOfLife from './GameOfLife/gameOfLife'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <GameOfLife></GameOfLife>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}